{"version":3,"sources":["Images.js","Explosion.js","Rip.js","App.js","serviceWorker.js","index.js"],"names":["list","Image","posed","div","hide","opacity","scale","y","show","done","Images","state","visible","_this2","this","setInterval","setState","setTimeout","props","onDone","length","count","react_default","a","createElement","map","l","i","console","log","pose","key","alt","src","Component","className","React","Audio","play","loop","playsInline","muted","autoPlay","preload","App","src_Images","Explosion_default","Rip_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAIMA,EAAO,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,UAE1DC,EAAQC,IAAMC,IAAI,CACtBC,KAAM,CACJC,QAAS,EACTC,MAAO,GACPC,EAAG,IAELC,KAAM,CACJH,QAAS,EACTC,MAAO,EACPC,EAAG,GAELE,KAAM,CACJJ,QAAS,GACTC,MAAO,GACPC,EAAG,KA+CQG,6MA1CbC,MAAQ,CACNC,QAAS,sFAGS,IAAAC,EAAAC,KAGlBC,YAAY,WACVF,EAAKG,SAAS,CACZJ,QAASC,EAAKF,MAAMC,QAAU,KAJrB,MAQbK,WAAWH,KAAKI,MAAMC,OART,KAQwBnB,EAAKoB,yCAI1C,IAAMC,EAAQP,KAAKH,MAAMC,QAEzB,OACEU,EAAAC,EAAAC,cAAA,WACGxB,EAAKyB,IAAI,SAACC,EAAGC,GACZ,IAAIzB,EAAQ,OASZ,OARIyB,IAAMN,EACRnB,EAAQ,OACCyB,EAAIN,IACbnB,EAAQ,QAGV0B,QAAQC,IAAI,CAAE3B,UAGZoB,EAAAC,EAAAC,cAACvB,EAAD,CAAO6B,KAAM5B,EAAO6B,IAAKL,GACvBJ,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,GAAGC,IAAKP,eAlCVQ,2MCpBjBjB,WAAWH,KAAKI,MAAMC,OAAQ,sCAI9B,OACEG,EAAAC,EAAAC,cAAA,OAAKW,UAAU,QACbb,EAAAC,EAAAC,cAAA,OAAKS,IAAI,oDARYG,IAAMF,yMCE/B,IAAIG,MAAM,cAAcC,wCAGxB,OACEhB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,WACbb,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGFF,EAAAC,EAAAC,cAAA,SAAOS,IAAI,UAAUM,MAAI,EAACC,aAAW,EAACC,OAAK,EAACC,UAAQ,EAACC,QAAQ,iBAZxCP,IAAMF,WCmCpBU,6MA9BbjC,MAAQ,CACNH,KAAM,kFAEC,IAAAK,EAAAC,KACCN,EAASM,KAAKH,MAAdH,KAER,OACEc,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACbb,EAAAC,EAAAC,cAAA,OAAKW,UAAU,QACH,WAAT3B,GACCc,EAAAC,EAAAC,cAACqB,EAAD,CACE1B,OAAQ,WACNN,EAAKG,SAAS,CAAER,KAAM,iBAIlB,cAATA,GACCc,EAAAC,EAAAC,cAACsB,EAAD,CACE3B,OAAQ,WACNN,EAAKG,SAAS,CAAER,KAAM,WAIlB,QAATA,GAAkBc,EAAAC,EAAAC,cAACuB,EAAD,eAxBXb,aCMEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a84058b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport posed from \"react-pose\";\n\nconst list = [\"/1.png\", \"/2.png\", \"/3.png\", \"/4.png\", \"/5.png\", \"/6.png\"];\n\nconst Image = posed.div({\n  hide: {\n    opacity: 0,\n    scale: 0.9,\n    y: 10\n  },\n  show: {\n    opacity: 1,\n    scale: 1,\n    y: 0\n  },\n  done: {\n    opacity: 0.8,\n    scale: 0.9,\n    y: 0\n  }\n});\n\nclass Images extends Component {\n  state = {\n    visible: 0\n  };\n\n  componentDidMount() {\n    const time = 2500;\n\n    setInterval(() => {\n      this.setState({\n        visible: this.state.visible + 1\n      });\n    }, time);\n\n    setTimeout(this.props.onDone, time * list.length);\n  }\n\n  render() {\n    const count = this.state.visible;\n\n    return (\n      <div>\n        {list.map((l, i) => {\n          let posed = \"hide\";\n          if (i === count) {\n            posed = \"show\";\n          } else if (i < count) {\n            posed = \"done\";\n          }\n\n          console.log({ posed });\n\n          return (\n            <Image pose={posed} key={l}>\n              <img alt=\"\" src={l} />\n            </Image>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Images;\n","import React from \"react\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    setTimeout(this.props.onDone, 4000);\n  }\n\n  render() {\n    return (\n      <div className=\"expl\">\n        <img src=\"https://cdn.pbrd.co/images/mYwKJYJI.gif\" />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default class extends React.Component {\n  componentDidMount() {\n    new Audio(\"/music.mp3\").play();\n  }\n  render() {\n    return (\n      <div className=\"rip\">\n        <div className=\"content\">\n          <h1>RIP GABBE</h1>\n          <h2>2008 - 2018</h2>\n        </div>\n\n        <video src=\"/bg.mp4\" loop playsInline muted autoPlay preload=\"true\" />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Images from \"./Images\";\nimport Explosion from \"./Explosion\";\nimport Rip from \"./Rip\";\n\nclass App extends Component {\n  state = {\n    show: \"images\"\n  };\n  render() {\n    const { show } = this.state;\n\n    return (\n      <div className=\"container\">\n        <div className=\"wrap\">\n          {show === \"images\" && (\n            <Images\n              onDone={() => {\n                this.setState({ show: \"explosion\" });\n              }}\n            />\n          )}\n          {show === \"explosion\" && (\n            <Explosion\n              onDone={() => {\n                this.setState({ show: \"rip\" });\n              }}\n            />\n          )}\n          {show === \"rip\" && <Rip />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}